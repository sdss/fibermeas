#!/usr/bin/env python
# encoding: utf-8
import argparse
import sys
import matplotlib.pyplot as plt
import sys
import traceback
import glob
import os
from multiprocessing import Pool
import datetime
import pandas as pd
import fibermeas
from fibermeas.fibermeas import MeasureImage
import time

import warnings
warnings.filterwarnings("ignore")

# normal operation
# baseDir = "/Users/csayres/fibermeas/forConor/Sloan"
# outDir = "/Users/csayres/fibermeas/%s"%datetime.datetime.now().isoformat()

# triage
baseDir = "/Users/csayres/fibermeas/triage"
outDir = "/Users/csayres/fibermeas/triage"
handMeasTable = pd.read_csv(baseDir + "/byHandFiberMeas.csv")
threshMult = 0.25

redo = {}
# redo["P0730"] = 0.5 # wont work theres a bright spot in the detection zone
redo["P0889"] = 0.5
redo["P1010"] = 0.5
redo["P1262"] = 0.5
redo["P1287"] = 0.5
redo["P0040"] = 0.5
redo["P0626"] = 0.5
redo["P0689"] = 0.5
# redo["P0942"] = 0.5  # rotated!
redo["P1089"] = 0.5
redo["P0040"] = 0.5
redo["P0689"] = 0.5
redo["P0730"] = 0.5
redo["P1081"] = 0.5
# the 1000s positioners look edge-shaved?

# start at jul 13
# newRepos = ["2021Jul13", "2021Jul14", "2021Jul15", "2021Jul17", "2021Jul18"]


def findImgPairs(baseDir):
    imgPairs = []
    missingOns = []
    missingOffs = []
    #subdirs = glob.glob(baseDir + "/2021*")  #)Jul09*") + glob.glob(baseDir + "/2021Jul1*")
    # subdirs = [baseDir + "/" + x for x in newRepos]
    subdirs = [baseDir]
    for subdir in subdirs:  # only run july?
        # print("subdir")
        allOnFits = glob.glob(subdir + "/FPU_*ON.fits")
        allOffFits = glob.glob(subdir + "/FPU_*OFF.fits")

        allOns = []
        for ao in allOnFits:
            base, fname = os.path.split(ao)
            allOns.append(fname.split("_")[1])

        allOffs = []
        for aoff in allOnFits:
            base, fname = os.path.split(aoff)
            allOffs.append(fname.split("_")[1])

        # print("lens", len(allOns), len(allOffs))

        onSet = set(allOns)
        offSet = set(allOffs)

        goods = onSet.intersection(offSet)
        _missingOns = offSet.difference(onSet)
        missingOns.extend(list(_missingOns))
        _missingOffs = onSet.difference(offSet)
        missingOffs.extend(list(_missingOffs))

        for good in list(goods):
            # print("good", good)
            onFile = glob.glob(subdir + "/FPU_%s*ON.fits"%good)[0]
            offFile = glob.glob(subdir + "/FPU_%s*OFF.fits"%good)[0]
            imgPairs.append([onFile, offFile])

    print("number of img pairs", len(imgPairs), len(missingOns), len(missingOffs))
    return imgPairs, missingOns, missingOffs

    # print("goods:", list(goods))
    # print("midding ons:", list(missingOns))
    # print("midding offs:", list(missingOffs))
    # return list(goods), list(missingOns), list(missingOffs)

# doOnly = ["P1287", "P0585", "P0455", "P0437", "P0409", "P0499", "P0698"]
# doOnly = ["P0437", "P0499", "P0585", "P0648"]


def doOnePair(x):
    onImg, offImg = x
    failedToRun = False

    ### stuff for injecting hand meas
    handMeas = None
    _junk, fname = os.path.split(onImg)
    posID = fname.split("_")[1]
    if posID in list(handMeasTable.robotID):
        handMeas = handMeasTable[handMeasTable.robotID==posID]
    try:
        mi = MeasureImage(onImg, offImg, outDir, threshMult, handMeas)
        if mi.basename in redo.keys():
            mi.threshMult = redo[mi.basename] # modify thresholds
        # else:
        #     return None # exit before processing
        mi.plotRaw()
        mi.process()
    except Exception:
        print("FAILED: ", onImg, offImg)
        traceback.print_exc(file=sys.stdout)
        failedToRun = True
    plt.close("all")
    if failedToRun:
        return x
    else:
        return None


if __name__ == '__main__':

    imgPairs, missingOns, missingOffs = findImgPairs(baseDir)
    print("imgPairs")

    if not os.path.exists(outDir):
        os.mkdir(outDir)

    # doOnePair(imgPairs[0])

    p = Pool(12)
    tstart = time.time()
    _failedToRun = p.map(doOnePair, imgPairs)
    print("took %.2f minutes"%((time.time()-tstart)/60))

    with open(os.path.join(outDir, "summary.txt"), "w") as f:
        f.write("fibermeas version: %s\n"%str(fibermeas.__version__))
        f.write("threshMult: %.2f\n"%threshMult)
        for fail in _failedToRun:
            if fail:
                f.write("failed: %s\n"%str(fail))
            for missing in missingOns:
                f.write("missing on: %s\n"%(str(missing)))
            for missing in missingOffs:
                f.write("missing on: %s\n"%(str(missing)))

    # compile all centroids
    allCents = []
    for fname in glob.glob(outDir+"/*centroids.csv"):
        allCents.append(pd.read_csv(fname))
    allCents = pd.concat(allCents, ignore_index=True)
    allCents.to_csv(outDir + "/allCentroids.csv", index=False)

    # betaArmWidths = []
    # centroids = []
    # failed = []
    # missingOn = []
    # missingOff = []

    # for o in out:
    #     betaArmWidths.extend(o[0])
    #     centroids.extend(o[1])
    #     failed.extend(o[2])
    #     missingOn.extend(o[3])
    #     missingOff.extend(o[4])


    # print("beta arm widths (px)")
    # for x in betaArmWidths:
    #     print(x)

    # print("\n\n")

    # print("centroid dias (px)")
    # for x in centroids:
    #     print(x)

    # print("\n\n")

    # print("failed")
    # for x in failed:
    #     print(x)

    # print("\n\n")

    # print("missing ons")
    # for x in missingOn:
    #     print(x)

    # print("\n\n")

    # print("missing offs")
    # for x in missingOff:
    #     print(x)



    # nFails = 0
    # nTries = 0
    # for d in subDirs:
    #     print("on dir", d)
    #     workDir = baseDir + "/" + d
    #     goods, missingOns, missingOffs = verifyDirectory(workDir)
    #     if missingOns:
    #         print("missing ons", missingOns)
    #     if missingOffs:
    #         print("missing offs", missingOffs)

    #     for robot in goods:
    #         nTries += 1
    #         try:
    #             on = glob.glob(workDir + "/FPU_%s*ON.fits"%robot)
    #             assert len(on) == 1
    #             off = glob.glob(workDir + "/FPU_%s*OFF.fits"%robot)
    #             assert len(off) == 1

    #             mi = MeasureImage(on[0], off[0], workDir)
    #             mi.process()
    #         except Exception as e:
    #             nFails += 1
    #             print("FAILED: ", d, on[0], off[0])
    #             traceback.print_exc(file=sys.stdout)
    #         plt.close("all")

    # print("%i of %i failed %.2f rate"%(nFails, nTries, nFails/nTries))
            # break

    # allDirs = glob.glob("P*")
    # ons = glob.glob("/Users/csayres/fibermeas/forConor/Sloan/*ON.fits")
    # ons.sort()
    # offs = glob.glob("/Users/csayres/fibermeas/forConor/Sloan/*OFF.fits")
    # offs.sort()
    # for on, off in zip(ons,offs):
    #     # print(d)
    #     mi = MeasureImage(on, off, "./")
    #     mi.process()
    #     plt.close("all")

        # break

    # for filename in sys.argv[1:]:
    #     print("processing image", filename)
    #     try:
    #         processImage(filename)
    #         print("successfully processed", filename)
    #     except RuntimeError as e:
    #         print("failed to process", filename)
    #         traceback.print_exc(file=sys.stdout)

    #     # close all open plots
    #     plt.close("all")

